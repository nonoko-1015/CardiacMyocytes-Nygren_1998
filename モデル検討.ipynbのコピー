{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import imp\n",
    "try:\n",
    "    imp.find_module(\"ecell\")\n",
    "except ImportError:\n",
    "    import sys\n",
    "    sys.path.append(\"/opt/local/lib/python2.7/site-packages\")\n",
    "    sys.path.append(\"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import biosim_course"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "外部刺激を０にするために `stim_amplitude = 0` とした。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "EM = '''\n",
    "@{\n",
    "\"\"\"\n",
    "(Process\\s+)Expression(Flux|Assignment)(Process\\()(\\w+)(\\)\\s+\\{[\\w\\W]*?)\\n\\s*Expression.+?;\n",
    "$1Nygren_1998$4$2$3$4$5\n",
    "\"\"\"\n",
    "\n",
    "R  = 8314.0  # R in component membrane (millijoule_per_mole_kelvin)\n",
    "T  = 306.15  # T in component membrane (kelvin)\n",
    "F  = 96487   # F in component membrane (coulomb_per_mole)\n",
    "\n",
    "stim_start     = 0.1        # stim_start in component membrane (second)\n",
    "stim_end       = 100000000  # stim_end in component membrane (second)\n",
    "stim_period    = 1          # stim_period in component membrane (second)\n",
    "stim_duration  = 0.006      # stim_duration in component membrane (second)\n",
    "stim_amplitude = -280       # stim_amplitude in component membrane (picoA)\n",
    "#stim_amplitude = 0       # stim_amplitude in component membrane (picoA)\n",
    "\n",
    "Vol_i   = 0.005884          # Vol_i in component intracellular_ion_concentrations (nanolitre)\n",
    "Vol_up  = 0.0003969         # Vol_up in component Ca_handling_by_the_SR (nanolitre)\n",
    "Vol_rel = 4.41e-5           # Vol_rel in component Ca_handling_by_the_SR (nanolitre)\n",
    "Vol_d   = 0.0200000 * Vol_i # Vol_d in component intracellular_ion_concentrations (nanolitre)\n",
    "Vol_c   = 0.136000 * Vol_i  # Vol_c in component cleft_space_ion_concentrations (nanolitre)\n",
    "\n",
    "k_rel_i = 0.0003   # k_rel_i in component Ca_handling_by_the_SR (millimolar)\n",
    "\n",
    "}\n",
    "\n",
    "\n",
    "Stepper FixedODE1Stepper( Default ){ StepInterval 1.0e-5; }\n",
    "\n",
    "Stepper PassiveStepper( PSV ) {}\n",
    "\n",
    "System System( / )\n",
    "{\n",
    "  StepperID    Default;\n",
    "\n",
    "  Variable Variable( SIZE )\n",
    "  {\n",
    "      Value    1.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(voi)\n",
    "  {\n",
    "    Name \"time in component environment (second)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998voiFluxProcess(voi)\n",
    "  {\n",
    "    Name \"time in component environment (second)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [voi :.:voi  1];\n",
    "  }\n",
    "\n",
    "}\n",
    "\n",
    "System System( /Cleft )\n",
    "{\n",
    "  StepperID    Default;\n",
    "\n",
    "  Name \"The the extracellular cleft space\";\n",
    "\n",
    "  Variable Variable(SIZE)\n",
    "  {\n",
    "    Name \"Vol_c in component cleft_space_ion_concentrations (litre)\";\n",
    "    Value  @(Vol_c * 1.0e-9);\n",
    "  }\n",
    "  Variable Variable(Na_c)\n",
    "  {\n",
    "    Name \"Na_c in component cleft_space_ion_concentrations (molar)\";\n",
    "    MolarConc  130.011e-3;\n",
    "  }\n",
    "\n",
    "  Variable Variable(K_c)\n",
    "  {\n",
    "    Name \"K_c in component cleft_space_ion_concentrations (molar)\";\n",
    "    MolarConc  5.3581e-3;\n",
    "  }\n",
    "\n",
    "  Variable Variable(Ca_c)\n",
    "  {\n",
    "    Name \"Ca_c in component cleft_space_ion_concentrations (molar)\";\n",
    "    MolarConc  1.8147e-3;\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Na_cFluxProcess(j_Na_c)\n",
    "  {\n",
    "    Name \"d/dt Na_c in component cleft_space_ion_concentrations (millimolar)\";\n",
    "\n",
    "    tau_Na  14.3; # tau_Na in component cleft_space_ion_concentrations (second)\n",
    "    Na_b  130; # Na_b in component cleft_space_ion_concentrations (millimolar)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Na_c :.:Na_c  1];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_K_cFluxProcess(j_K_c)\n",
    "  {\n",
    "    Name \"d/dt K_c in component cleft_space_ion_concentrations (millimolar)\";\n",
    "\n",
    "    tau_K  10; # tau_K in component cleft_space_ion_concentrations (second)\n",
    "    K_b  5.4; # K_b in component cleft_space_ion_concentrations (millimolar)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [K_c   :.:K_c  1];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_cFluxProcess(j_Ca_c)\n",
    "  {\n",
    "    Name \"d/dt Ca_c in component cleft_space_ion_concentrations (millimolar)\";\n",
    "\n",
    "    tau_Ca  24.7; # tau_Ca in component cleft_space_ion_concentrations (second)\n",
    "    Ca_b  1.8; # Ca_b in component cleft_space_ion_concentrations (millimolar)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_c :.:Ca_c  1];\n",
    "  }\n",
    "\n",
    "}\n",
    "\n",
    "System System( /Cytosol )\n",
    "{\n",
    "  StepperID    Default;\n",
    "\n",
    "  Name \"Cytosol\";\n",
    "\n",
    "  Variable Variable( SIZE )\n",
    "  {\n",
    "    Name \"Vol_i in component intracellular_ion_concentrations (litre)\";\n",
    "    Value    @(Vol_i * 1.0e-9);\n",
    "  }\n",
    "\n",
    "  ### status\n",
    "\n",
    "  Variable Variable(V)\n",
    "  {\n",
    "    Name \"V in component membrane (millivolt)\";\n",
    "    Value  -74.2525;\n",
    "  }\n",
    "\n",
    "  Variable Variable(Na_i)\n",
    "  {\n",
    "    Name \"Na_i in component intracellular_ion_concentrations (molar)\";\n",
    "    MolarConc  8.5547e-3;\n",
    "  }\n",
    "\n",
    "  Variable Variable(m)\n",
    "  {\n",
    "    Name \"m in component sodium_current_m_gate (dimensionless)\";\n",
    "    Value  0.0032017;\n",
    "  }\n",
    "\n",
    "  Variable Variable(h1)\n",
    "  {\n",
    "    Name \"h1 in component sodium_current_h1_gate (dimensionless)\";\n",
    "    Value  0.8814;\n",
    "  }\n",
    "\n",
    "  Variable Variable(h2)\n",
    "  {\n",
    "    Name \"h2 in component sodium_current_h2_gate (dimensionless)\";\n",
    "    Value  0.8742;\n",
    "  }\n",
    "\n",
    "  Variable Variable(d_L)\n",
    "  {\n",
    "    Name \"d_L in component L_type_Ca_channel_d_L_gate (dimensionless)\";\n",
    "    Value  1.3005e-5;\n",
    "  }\n",
    "\n",
    "  Variable Variable(f_L_1)\n",
    "  {\n",
    "    Name \"f_L_1 in component L_type_Ca_channel_f_L1_gate (dimensionless)\";\n",
    "    Value  0.9986;\n",
    "  }\n",
    "\n",
    "  Variable Variable(f_L_2)\n",
    "  {\n",
    "    Name \"f_L_2 in component L_type_Ca_channel_f_L2_gate (dimensionless)\";\n",
    "    Value  0.9986;\n",
    "  }\n",
    "\n",
    "  Variable Variable(K_i)\n",
    "  {\n",
    "    Name \"K_i in component intracellular_ion_concentrations (molar)\";\n",
    "    MolarConc  129.435e-3;\n",
    "  }\n",
    "\n",
    "  Variable Variable(r)\n",
    "  {\n",
    "    Name \"r in component Ca_independent_transient_outward_K_current_r_gate (dimensionless)\";\n",
    "    Value  0.0010678;\n",
    "  }\n",
    "\n",
    "  Variable Variable(s)\n",
    "  {\n",
    "    Name \"s in component Ca_independent_transient_outward_K_current_s_gate (dimensionless)\";\n",
    "    Value  0.949;\n",
    "  }\n",
    "\n",
    "  Variable Variable(r_sus)\n",
    "  {\n",
    "    Name \"r_sus in component sustained_outward_K_current_r_sus_gate (dimensionless)\";\n",
    "    Value  0.00015949;\n",
    "  }\n",
    "\n",
    "  Variable Variable(s_sus)\n",
    "  {\n",
    "    Name \"s_sus in component sustained_outward_K_current_s_sus_gate (dimensionless)\";\n",
    "    Value  0.9912;\n",
    "  }\n",
    "\n",
    "  Variable Variable(n)\n",
    "  {\n",
    "    Name \"n in component delayed_rectifier_K_currents_n_gate (dimensionless)\";\n",
    "    Value  0.0048357;\n",
    "  }\n",
    "\n",
    "  Variable Variable(p_a)\n",
    "  {\n",
    "    Name \"p_a in component delayed_rectifier_K_currents_pa_gate (dimensionless)\";\n",
    "    Value  0.0001;\n",
    "  }\n",
    "\n",
    "  Variable Variable(Ca_i)\n",
    "  {\n",
    "    Name \"Ca_i in component intracellular_ion_concentrations (molar)\";\n",
    "    MolarConc  6.729e-8;\n",
    "  }\n",
    "\n",
    "  Variable Variable(O_C)\n",
    "  {\n",
    "    Name \"O_C in component intracellular_Ca_buffering (dimensionless)\";\n",
    "    Value  0.0275;\n",
    "  }\n",
    "\n",
    "  Variable Variable(O_TC)\n",
    "  {\n",
    "    Name \"O_TC in component intracellular_Ca_buffering (dimensionless)\";\n",
    "    Value  0.0133;\n",
    "  }\n",
    "\n",
    "  Variable Variable(O_TMgC)\n",
    "  {\n",
    "    Name \"O_TMgC in component intracellular_Ca_buffering (dimensionless)\";\n",
    "    Value  0.1961;\n",
    "  }\n",
    "\n",
    "  Variable Variable(O_TMgMg)\n",
    "  {\n",
    "    Name \"O_TMgMg in component intracellular_Ca_buffering (dimensionless)\";\n",
    "    Value  0.7094;\n",
    "  }\n",
    "\n",
    "  ### algebraic\n",
    "\n",
    "  Variable Variable(i_Stim)\n",
    "  {\n",
    "    Name \"i_Stim in component membrane (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(m_infinity)\n",
    "  {\n",
    "    Name \"m_infinity in component sodium_current_m_gate (dimensionless)\";\n",
    "    Value  0.0032017055046363744;\n",
    "  }\n",
    "\n",
    "  Variable Variable(h_infinity)\n",
    "  {\n",
    "    Name \"h_infinity in component sodium_current_h1_gate (dimensionless)\";\n",
    "    Value  0.8818331920341357;\n",
    "  }\n",
    "\n",
    "  Variable Variable(d_L_infinity)\n",
    "  {\n",
    "    Name \"d_L_infinity in component L_type_Ca_channel_d_L_gate (dimensionless)\";\n",
    "    Value  1.3001523226591241e-05;\n",
    "  }\n",
    "\n",
    "  Variable Variable(f_L_infinity)\n",
    "  {\n",
    "    Name \"f_L_infinity in component L_type_Ca_channel_f_L1_gate (dimensionless)\";\n",
    "    Value  0.9986400461877076;\n",
    "  }\n",
    "\n",
    "  Variable Variable(r_infinity)\n",
    "  {\n",
    "    Name \"r_infinity in component Ca_independent_transient_outward_K_current_r_gate (dimensionless)\";\n",
    "    Value  0.0010677467619427574;\n",
    "  }\n",
    "\n",
    "  Variable Variable(s_infinity)\n",
    "  {\n",
    "    Name \"s_infinity in component Ca_independent_transient_outward_K_current_s_gate (dimensionless)\";\n",
    "    Value  0.949549739332083;\n",
    "  }\n",
    "\n",
    "  Variable Variable(r_sus_infinity)\n",
    "  {\n",
    "    Name \"r_sus_infinity in component sustained_outward_K_current_r_sus_gate (dimensionless)\";\n",
    "    Value  0.00015937958206002146;\n",
    "  }\n",
    "\n",
    "  Variable Variable(s_sus_infinity)\n",
    "  {\n",
    "    Name \"s_sus_infinity in component sustained_outward_K_current_s_sus_gate (dimensionless)\";\n",
    "    Value  0.998246137934045;\n",
    "  }\n",
    "\n",
    "  Variable Variable(n_infinity)\n",
    "  {\n",
    "    Name \"n_infinity in component delayed_rectifier_K_currents_n_gate (dimensionless)\";\n",
    "    Value  0.0006026430448910566;\n",
    "  }\n",
    "\n",
    "  Variable Variable(p_a_infinity)\n",
    "  {\n",
    "    Name \"p_a_infinity in component delayed_rectifier_K_currents_pa_gate (dimensionless)\";\n",
    "    Value  5.142078505326955e-05;\n",
    "  }\n",
    "\n",
    "  Variable Variable(E_Na)\n",
    "  {\n",
    "    Name \"E_Na in component sodium_current (millivolt)\";\n",
    "    Value  71.78374025254665;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_m)\n",
    "  {\n",
    "    Name \"tau_m in component sodium_current_m_gate (second)\";\n",
    "    Value  2.6411712783673727e-05;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_h1)\n",
    "  {\n",
    "    Name \"tau_h1 in component sodium_current_h1_gate (second)\";\n",
    "    Value  0.03029985430041965;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_h2)\n",
    "  {\n",
    "    Name \"tau_h2 in component sodium_current_h2_gate (second)\";\n",
    "    Value  0.12299941720167859;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_d_L)\n",
    "  {\n",
    "    Name \"tau_d_L in component L_type_Ca_channel_d_L_gate (second)\";\n",
    "    Value  0.0024873842753601674;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_f_L1)\n",
    "  {\n",
    "    Name \"tau_f_L1 in component L_type_Ca_channel_f_L1_gate (second)\";\n",
    "    Value  0.010561832433011065;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_f_L2)\n",
    "  {\n",
    "    Name \"tau_f_L2 in component L_type_Ca_channel_f_L2_gate (second)\";\n",
    "    Value  0.06655984396077287;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_r)\n",
    "  {\n",
    "    Name \"tau_r in component Ca_independent_transient_outward_K_current_r_gate (second)\";\n",
    "    Value  0.0015076482796525805;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_s)\n",
    "  {\n",
    "    Name \"tau_s in component Ca_independent_transient_outward_K_current_s_gate (second)\";\n",
    "    Value  0.07183350864577431;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_r_sus)\n",
    "  {\n",
    "    Name \"tau_r_sus in component sustained_outward_K_current_r_sus_gate (second)\";\n",
    "    Value  0.009472038556972982;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_s_sus)\n",
    "  {\n",
    "    Name \"tau_s_sus in component sustained_outward_K_current_s_sus_gate (second)\";\n",
    "    Value  0.33788952618800877;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_n)\n",
    "  {\n",
    "    Name \"tau_n in component delayed_rectifier_K_currents_n_gate (second)\";\n",
    "    Value  0.7000000000905494;\n",
    "  }\n",
    "\n",
    "  Variable Variable(tau_p_a)\n",
    "  {\n",
    "    Name \"tau_p_a in component delayed_rectifier_K_currents_pa_gate (second)\";\n",
    "    Value  0.031750398000436095;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_Na)\n",
    "  {\n",
    "    Name \"i_Na in component sodium_current (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(f_Ca)\n",
    "  {\n",
    "    Name \"f_Ca in component L_type_Ca_channel (dimensionless)\";\n",
    "    Value  0.002891415473410205;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_Ca_L)\n",
    "  {\n",
    "    Name \"i_Ca_L in component L_type_Ca_channel (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(E_K)\n",
    "  {\n",
    "    Name \"E_K in component Ca_independent_transient_outward_K_current (millivolt)\";\n",
    "    Value  -84.00907384905881;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_t)\n",
    "  {\n",
    "    Name \"i_t in component Ca_independent_transient_outward_K_current (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_sus)\n",
    "  {\n",
    "    Name \"i_sus in component sustained_outward_K_current (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(p_i)\n",
    "  {\n",
    "    Name \"p_i in component delayed_rectifier_K_currents_pi_gate (dimensionless)\";\n",
    "    Value  0.6904422140268597;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_K1)\n",
    "  {\n",
    "    Name \"i_K1 in component inward_rectifier (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_Kr)\n",
    "  {\n",
    "    Name \"i_Kr in component delayed_rectifier_K_currents (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_Ks)\n",
    "  {\n",
    "    Name \"i_Ks in component delayed_rectifier_K_currents (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_B_Na)\n",
    "  {\n",
    "    Name \"i_B_Na in component background_currents (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(E_Ca)\n",
    "  {\n",
    "    Name \"E_Ca in component background_currents (millivolt)\";\n",
    "    Value  134.5701213309398;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_B_Ca)\n",
    "  {\n",
    "    Name \"i_B_Ca in component background_currents (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_NaK)\n",
    "  {\n",
    "    Name \"i_NaK in component sodium_potassium_pump (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_CaP)\n",
    "  {\n",
    "    Name \"i_CaP in component sarcolemmal_calcium_pump_current (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_NaCa)\n",
    "  {\n",
    "    Name \"i_NaCa in component Na_Ca_ion_exchanger_current (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(dOCdt)\n",
    "  {\n",
    "    Name \"dOCdt in component intracellular_Ca_buffering (per_second)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(dOTCdt)\n",
    "  {\n",
    "    Name \"dOTCdt in component intracellular_Ca_buffering (per_second)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(dOTMgCdt)\n",
    "  {\n",
    "    Name \"dOTMgCdt in component intracellular_Ca_buffering (per_second)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_VFluxProcess(v_V)\n",
    "  {\n",
    "    Name \"d/dt V in component membrane (millivolt)\";\n",
    "\n",
    "    Cm  0.05; # Cm in component membrane (nanoF)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [V      :.:V       1]\n",
    "      [i_Stim :.:i_Stim  0]\n",
    "      [i_Na   :.:i_Na    0]\n",
    "      [i_Ca_L :.:i_Ca_L  0]\n",
    "      [i_t    :.:i_t     0]\n",
    "      [i_sus  :.:i_sus   0]\n",
    "      [i_K1   :.:i_K1    0]\n",
    "      [i_Kr   :.:i_Kr    0]\n",
    "      [i_Ks   :.:i_Ks    0]\n",
    "      [i_B_Na :.:i_B_Na  0]\n",
    "      [i_B_Ca :.:i_B_Ca  0]\n",
    "      [i_NaK  :.:i_NaK   0]\n",
    "      [i_CaP  :.:i_CaP   0]\n",
    "      [i_NaCa :.:i_NaCa  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_K_iFluxProcess(j_K_i)\n",
    "  {\n",
    "    Name \"d/dt K_i in component intracellular_ion_concentrations (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [K_c   :../Cleft:K_c  1]\n",
    "      [K_i   :.:K_i        -1]\n",
    "      [i_t   :.:i_t         0]\n",
    "      [i_sus :.:i_sus       0]\n",
    "      [i_K1  :.:i_K1        0]\n",
    "      [i_Kr  :.:i_Kr        0]\n",
    "      [i_Ks  :.:i_Ks        0]\n",
    "      [i_NaK :.:i_NaK       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Na_iFluxProcess(j_Na_i)\n",
    "  {\n",
    "    Name \"d/dt Na_i in component intracellular_ion_concentrations (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "    phi_Na_en -1.68;  # phi_Na_en in component intracellular_ion_concentrations (picoA)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Na_c   :../Cleft:Na_c  1]\n",
    "      [Na_i   :.:Na_i        -1]\n",
    "      [i_Na   :.:i_Na         0]\n",
    "      [i_B_Na :.:i_B_Na       0]\n",
    "      [i_NaK  :.:i_NaK        0]\n",
    "      [i_NaCa :.:i_NaCa       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_iFluxProcess(j_Ca_i)\n",
    "  {\n",
    "    Name \"d/dt Ca_i in component intracellular_ion_concentrations (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_i     :.:Ca_i      1]\n",
    "      [dOTCdt   :.:dOTCdt    0]\n",
    "      [dOTMgCdt :.:dOTMgCdt  0]\n",
    "      [dOCdt    :.:dOCdt     0];\n",
    "  }\n",
    "\n",
    "    Process Nygren_1998j_Ca_i_cFluxProcess(j_Ca_i_c)\n",
    "    {\n",
    "      Name \"d/dt Ca_i in component intracellular_ion_concentrations (millimolar)\";\n",
    "\n",
    "      F  @F;\n",
    "\n",
    "      VariableReferenceList\n",
    "        [Ca_c   :../Cleft:Ca_c  1]\n",
    "        [Ca_i   :.:Ca_i        -1]\n",
    "        [i_B_Ca :.:i_B_Ca       0]\n",
    "        [i_CaP  :.:i_CaP        0]\n",
    "        [i_NaCa :.:i_NaCa       0];\n",
    "    }\n",
    "\n",
    "  Process Nygren_1998_EAssignmentProcess(E_K)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "    F  @F;\n",
    "    T  @T;\n",
    "    R  @R;\n",
    "    z  1;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [E :.:E_K         1]\n",
    "      [o :../Cleft:K_c  0]\n",
    "      [i :.:K_i         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_ItAssignmentProcess(i_t)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    g_t  7.5; # g_t in component Ca_independent_transient_outward_K_current (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_t        :.:i_t         1]\n",
    "      [tau_r      :.:tau_r       1]\n",
    "      [r_infinity :.:r_infinity  1]\n",
    "      [tau_s      :.:tau_s       1]\n",
    "      [s_infinity :.:s_infinity  1]\n",
    "      [r          :.:r           0]\n",
    "      [s          :.:s           0]\n",
    "      [V          :.:V           0]\n",
    "      [E_K        :.:E_K         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_r)\n",
    "  {\n",
    "    Name \"d/dt r in component Ca_independent_transient_outward_K_current_r_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:r           1]\n",
    "      [g_inf :.:r_infinity  0]\n",
    "      [g_tau :.:tau_r       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_s)\n",
    "  {\n",
    "    Name \"d/dt s in component Ca_independent_transient_outward_K_current_s_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:s           1]\n",
    "      [g_inf :.:s_infinity  0]\n",
    "      [g_tau :.:tau_s       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_IsusAssignmentProcess(i_sus)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    g_sus  2.75; # g_sus in component sustained_outward_K_current (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [tau_r_sus      :.:tau_r_sus       1]\n",
    "      [r_sus_infinity :.:r_sus_infinity  1]\n",
    "      [tau_s_sus      :.:tau_s_sus       1]\n",
    "      [s_sus_infinity :.:s_sus_infinity  1]\n",
    "      [i_sus          :.:i_sus           1]\n",
    "      [r_sus          :.:r_sus           0]\n",
    "      [s_sus          :.:s_sus           0]\n",
    "      [V              :.:V               0]\n",
    "      [E_K            :.:E_K             0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_r_sus)\n",
    "  {\n",
    "    Name \"d/dt r_sus in component sustained_outward_K_current_r_sus_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:r_sus           1]\n",
    "      [g_inf :.:r_sus_infinity  0]\n",
    "      [g_tau :.:tau_r_sus       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_s_sus)\n",
    "  {\n",
    "    Name \"d/dt s_sus in component sustained_outward_K_current_s_sus_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:s_sus           1]\n",
    "      [g_inf :.:s_sus_infinity  0]\n",
    "      [g_tau :.:tau_s_sus       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_IKrAssignmentProcess(i_Kr)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    g_Kr  0.5; # g_Kr in component delayed_rectifier_K_currents (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [tau_p_a      :.:tau_p_a       1]\n",
    "      [p_a_infinity :.:p_a_infinity  1]\n",
    "      [p_i :.:p_i  1]\n",
    "      [i_Kr :.:i_Kr  1]\n",
    "      [p_a  :.:p_a   0]\n",
    "      [V    :.:V     0]\n",
    "      [E_K  :.:E_K   0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_p_a)\n",
    "  {\n",
    "    Name \"d/dt p_a in component delayed_rectifier_K_currents_pa_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:p_a           1]\n",
    "      [g_inf :.:p_a_infinity  0]\n",
    "      [g_tau :.:tau_p_a       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_IKsAssignmentProcess(i_Ks)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    g_Ks  1; # g_Ks in component delayed_rectifier_K_currents (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [tau_n        :.:tau_n         1]\n",
    "      [n_infinity   :.:n_infinity    1]\n",
    "      [i_Ks :.:i_Ks  1]\n",
    "      [n    :.:n     0]\n",
    "      [V    :.:V     0]\n",
    "      [E_K  :.:E_K   0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_n)\n",
    "  {\n",
    "    Name \"d/dt n in component delayed_rectifier_K_currents_n_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:n           1]\n",
    "      [g_inf :.:n_infinity  0]\n",
    "      [g_tau :.:tau_n       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_K1AssignmentProcess(i_K1)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    T  @T;\n",
    "    R  @R;\n",
    "    F  @F;\n",
    "    g_K1  3; # g_K1 in component inward_rectifier (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_K1 :.:i_K1        1]\n",
    "      [K_c  :../Cleft:K_c  0]\n",
    "      [V    :.:V           0]\n",
    "      [E_K  :.:E_K         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_NaKAssignmentProcess(i_NaK)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    k_NaK_Na  11; # k_NaK_Na in component sodium_potassium_pump (millimolar)\n",
    "    k_NaK_K  1; # k_NaK_K in component sodium_potassium_pump (millimolar)\n",
    "    i_NaK_max  70.8253; # i_NaK_max in component sodium_potassium_pump (picoA)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_NaK :.:i_NaK       1]\n",
    "      [K_c   :../Cleft:K_c  0]\n",
    "      [Na_i  :.:Na_i        0]\n",
    "      [V     :.:V           0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_EAssignmentProcess(E_Na)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    F  @F;\n",
    "    T  @T;\n",
    "    R  @R;\n",
    "    z  1;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [E :.:E_Na         1]\n",
    "      [o :../Cleft:Na_c  0]\n",
    "      [i :.:Na_i         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_INaAssignmentProcess(i_Na)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    T  @T;\n",
    "    R  @R;\n",
    "    F  @F;\n",
    "    P_Na  0.0016; # P_Na in component sodium_current (nanolitre_per_second)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_Na :.:i_Na         1]\n",
    "      [m_infinity :.:m_infinity  1]\n",
    "      [tau_m      :.:tau_m       1]\n",
    "      [h_infinity :.:h_infinity  1]\n",
    "      [tau_h1     :.:tau_h1      1]\n",
    "      [tau_h2     :.:tau_h2      1]\n",
    "      [m    :.:m            0]\n",
    "      [h1   :.:h1           0]\n",
    "      [h2   :.:h2           0]\n",
    "      [Na_c :../Cleft:Na_c  0]\n",
    "      [V    :.:V            0]\n",
    "      [E_Na :.:E_Na         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_m)\n",
    "  {\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:m           1]\n",
    "      [g_inf :.:m_infinity  0]\n",
    "      [g_tau :.:tau_m       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_h1)\n",
    "  {\n",
    "    Name \"d/dt h1 in component sodium_current_h1_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:h1          1]\n",
    "      [g_inf :.:h_infinity  0]\n",
    "      [g_tau :.:tau_h1      0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_h2)\n",
    "  {\n",
    "    Name \"d/dt h2 in component sodium_current_h2_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:h2          1]\n",
    "      [g_inf :.:h_infinity  0]\n",
    "      [g_tau :.:tau_h2      0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_BackgroudLeakAssignmentProcess(i_B_Na)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    g  0.060599; # g_B_Na in component background_currents (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i :.:i_B_Na  1]\n",
    "      [V :.:V       0]\n",
    "      [E :.:E_Na    0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_EAssignmentProcess(E_Ca)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    F  @F;\n",
    "    T  @T;\n",
    "    R  @R;\n",
    "    z  2;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [E :.:E_Ca         1]\n",
    "      [o :../Cleft:Ca_c  0]\n",
    "      [i :.:Ca_i         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_ICaLAssignmentProcess(i_Ca_L)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    E_Ca_app  60; # E_Ca_app in component L_type_Ca_channel (millivolt)\n",
    "    g_Ca_L  6.75; # g_Ca_L in component L_type_Ca_channel (nanoS)\n",
    "    k_Ca  0.025; # k_Ca in component L_type_Ca_channel (millimolar)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_Ca_L :.:i_Ca_L  1]\n",
    "      [d_L_infinity :.:d_L_infinity  1]\n",
    "      [tau_d_L      :.:tau_d_L       1]\n",
    "      [f_L_infinity :.:f_L_infinity  1]\n",
    "      [tau_f_L1     :.:tau_f_L1      1]\n",
    "      [tau_f_L2     :.:tau_f_L2      1]\n",
    "      [f_Ca :.:f_Ca     1]\n",
    "      [d_L    :.:d_L     0]\n",
    "      [f_L_1  :.:f_L_1   0]\n",
    "      [f_L_2  :.:f_L_2   0]\n",
    "      [Ca_d :../d:Ca_d  0]\n",
    "      [V      :.:V       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_d_L)\n",
    "  {\n",
    "    Name \"d/dt d_L in component L_type_Ca_channel_d_L_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:d_L           1]\n",
    "      [g_inf :.:d_L_infinity  0]\n",
    "      [g_tau :.:tau_d_L       0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_f_L_1)\n",
    "  {\n",
    "    Name \"d/dt f_L_1 in component L_type_Ca_channel_f_L1_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:f_L_1         1]\n",
    "      [g_inf :.:f_L_infinity  0]\n",
    "      [g_tau :.:tau_f_L1      0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_GatingFluxProcess(v_f_L_2)\n",
    "  {\n",
    "    Name \"d/dt f_L_2 in component L_type_Ca_channel_f_L2_gate (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [gate  :.:f_L_2         1]\n",
    "      [g_inf :.:f_L_infinity  0]\n",
    "      [g_tau :.:tau_f_L2      0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_BackgroudLeakAssignmentProcess(i_B_Ca)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    g  0.078681; # g_B_Ca in component background_currents (nanoS)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i :.:i_B_Ca  1]\n",
    "      [V :.:V       0]\n",
    "      [E :.:E_Ca    0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_CaPAssignmentProcess(i_CaP)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    k_CaP  0.0002; # k_CaP in component sarcolemmal_calcium_pump_current (millimolar)\n",
    "    i_CaP_max  4; # i_CaP_max in component sarcolemmal_calcium_pump_current (picoA)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_CaP :.:i_CaP  1]\n",
    "      [Ca_i  :.:Ca_i   0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_NaCaAssignmentProcess(i_NaCa)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    T  @T;\n",
    "    R  @R;\n",
    "    F  @F;\n",
    "    gamma  0.45; # gamma in component Na_Ca_ion_exchanger_current (dimensionless)\n",
    "    k_NaCa  0.0374842; # k_NaCa in component Na_Ca_ion_exchanger_current (picoA_per_millimolar_4)\n",
    "    d_NaCa  0.0003; # d_NaCa in component Na_Ca_ion_exchanger_current (per_millimolar_4)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_NaCa :.:i_NaCa       1]\n",
    "      [Na_i   :.:Na_i         0]\n",
    "      [Ca_c   :../Cleft:Ca_c  0]\n",
    "      [V      :.:V            0]\n",
    "      [Na_c   :../Cleft:Na_c  0]\n",
    "      [Ca_i   :.:Ca_i         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_StimAssignmentProcess(i_Stim)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    Name \"i_Stim in component membrane (picoA)\";\n",
    "\n",
    "    stim_amplitude  @stim_amplitude;\n",
    "    stim_duration  @stim_duration;\n",
    "    stim_period  @stim_period;\n",
    "    stim_start  @stim_start;\n",
    "    stim_end  @stim_end;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_Stim :.:i_Stim  1]\n",
    "      [voi    :/:voi     0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998_OAssignmentProcess(O)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [dOCdt    :.:dOCdt     1]\n",
    "      [dOTCdt   :.:dOTCdt    1]\n",
    "      [dOTMgCdt :.:dOTMgCdt  1]\n",
    "      [O_C      :.:O_C       0]\n",
    "      [O_TC     :.:O_TC      0]\n",
    "      [O_TMgC   :.:O_TMgC    0]\n",
    "      [O_TMgMg  :.:O_TMgMg   0]\n",
    "      [Ca_i     :.:Ca_i      0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_O_CFluxProcess(v_O_C)\n",
    "  {\n",
    "    Name \"d/dt O_C in component intracellular_Ca_buffering (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [O_C   :.:O_C    1]\n",
    "      [dOCdt :.:dOCdt  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_O_TCFluxProcess(v_O_TC)\n",
    "  {\n",
    "    Name \"d/dt O_TC in component intracellular_Ca_buffering (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [O_TC   :.:O_TC    1]\n",
    "      [dOTCdt :.:dOTCdt  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_O_TMgCFluxProcess(v_O_TMgC)\n",
    "  {\n",
    "    Name \"d/dt O_TMgC in component intracellular_Ca_buffering (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [O_TMgC   :.:O_TMgC    1]\n",
    "      [dOTMgCdt :.:dOTMgCdt  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_O_TMgMgFluxProcess(v_O_TMgMg)\n",
    "  {\n",
    "\n",
    "    Mg_i  2.5; # Mg_i in component intracellular_Ca_buffering (millimolar)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [O_TMgMg :.:O_TMgMg 1]\n",
    "      [O_TMgC  :.:O_TMgC  0];\n",
    "  }\n",
    "\n",
    "}\n",
    "\n",
    "System System( /d )\n",
    "{\n",
    "  StepperID    Default;\n",
    "\n",
    "  Name \"The diffusion-restricted subsarcolemmal space\";\n",
    "\n",
    "  Variable Variable(SIZE)\n",
    "  {\n",
    "    Name \"Vol_d in component intracellular_ion_concentrations (litre)\";\n",
    "    Value  @(Vol_d * 1.0e-9);\n",
    "  }\n",
    "\n",
    "  Variable Variable(Ca_d)\n",
    "  {\n",
    "    Name \"Ca_d in component intracellular_ion_concentrations (molar)\";\n",
    "    MolarConc  7.2495e-8;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_di)\n",
    "  {\n",
    "    Name \"i_di in component intracellular_ion_concentrations (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_diAssignmentProcess(i_di)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    tau_di  0.01; # tau_di in component intracellular_ion_concentrations (second)\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_di :.:i_di           1]\n",
    "      [Ca_d :.:Ca_d           0]\n",
    "      [Ca_i :../Cytosol:Ca_i  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_diFluxProcess(j_Ca_di)\n",
    "  {\n",
    "    Name \"d/dt Ca_d in component intracellular_ion_concentrations (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_i :../Cytosol:Ca_i  1]\n",
    "      [Ca_d :.:Ca_d          -1]\n",
    "      [i_di :.:i_di           0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_dFluxProcess(j_Ca_d)\n",
    "  {\n",
    "    Name \"d/dt Ca_d in component intracellular_ion_concentrations (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_d   :.:Ca_d             1]\n",
    "      [Ca_c   :../Cleft:Ca_c     -1]\n",
    "      [i_Ca_L :../Cytosol:i_Ca_L  0];\n",
    "  }\n",
    "\n",
    "}\n",
    "\n",
    "System System( /SR_up )\n",
    "{\n",
    "  StepperID    Default;\n",
    "\n",
    "  Name \"The sarcoplasmic reticulum uptake compartment\";\n",
    "\n",
    "  Variable Variable(SIZE)\n",
    "  {\n",
    "    Name \"Vol_up in component Ca_handling_by_the_SR (litre)\";\n",
    "    Value  @(Vol_up * 1.0e-9);\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_up)\n",
    "  {\n",
    "    Name \"i_up in component Ca_handling_by_the_SR (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(Ca_up)\n",
    "  {\n",
    "    Name \"Ca_up in component Ca_handling_by_the_SR (molar)\";\n",
    "    MolarConc  0.6646e-3;\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_upAssignmentProcess(i_up)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    k_srca  0.5; # k_srca in component Ca_handling_by_the_SR (millimolar)\n",
    "    k_xcs  0.4; # k_xcs in component Ca_handling_by_the_SR (dimensionless)\n",
    "    k_cyca  0.0003; # k_cyca in component Ca_handling_by_the_SR (millimolar)\n",
    "    I_up_max  2800; # I_up_max in component Ca_handling_by_the_SR (picoA)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_up  :.:i_up           1]\n",
    "      [Ca_i  :../Cytosol:Ca_i  0]\n",
    "      [Ca_up :.:Ca_up          0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_up_iFluxProcess(j_Ca_up_i)\n",
    "  {\n",
    "    Name \"d/dt Ca_up in component Ca_handling_by_the_SR (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_up :.:Ca_up          1]\n",
    "      [Ca_i  :../Cytosol:Ca_i -1]\n",
    "      [i_up  :.:i_up           0];\n",
    "  }\n",
    "\n",
    "}\n",
    "\n",
    "System System( /SR_rel )\n",
    "{\n",
    "  StepperID    Default;\n",
    "\n",
    "  Name \"The sarcoplasmic reticulum release compartment\";\n",
    "\n",
    "  Variable Variable(SIZE)\n",
    "  {\n",
    "    Name \"Vol_rel in component Ca_handling_by_the_SR (litre)\";\n",
    "    Value  @(Vol_rel * 1.0e-9);\n",
    "  }\n",
    "\n",
    "  Variable Variable(Ca_rel)\n",
    "  {\n",
    "    Name \"Ca_rel in component Ca_handling_by_the_SR (molar)\";\n",
    "    MolarConc  0.6465e-3;\n",
    "  }\n",
    "\n",
    "  Variable Variable(F1)\n",
    "  {\n",
    "    Name \"F1 in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "    Value  0.4284;\n",
    "  }\n",
    "\n",
    "  Variable Variable(F2)\n",
    "  {\n",
    "    Name \"F2 in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "    Value  0.0028;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_tr)\n",
    "  {\n",
    "    Name \"i_tr in component Ca_handling_by_the_SR (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(i_rel)\n",
    "  {\n",
    "    Name \"i_rel in component Ca_handling_by_the_SR (picoA)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(O_Calse)\n",
    "  {\n",
    "    Name \"O_Calse in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "    Value  0.4369;\n",
    "  }\n",
    "\n",
    "  Variable Variable(v_O_Calse)\n",
    "  {\n",
    "    Name \"d/dt O_Calse in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "    Value  0.0;\n",
    "  }\n",
    "\n",
    "  Variable Variable(r_act)\n",
    "  {\n",
    "    Name \"r_act in component Ca_handling_by_the_SR (per_second)\";\n",
    "    Value  0.22966210288261288;\n",
    "  }\n",
    "\n",
    "  Variable Variable(r_inact)\n",
    "  {\n",
    "    Name \"r_inact in component Ca_handling_by_the_SR (per_second)\";\n",
    "    Value  34.342589791678876;\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_trAssignmentProcess(i_tr)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    tau_tr  0.01; # tau_tr in component Ca_handling_by_the_SR (second)\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_tr   :.:i_tr          1]\n",
    "      [Ca_up  :../SR_up:Ca_up  0]\n",
    "      [Ca_rel :.:Ca_rel        0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_F1FluxProcess(v_F1)\n",
    "  {\n",
    "\n",
    "    r_recov  0.815; # r_recov in component Ca_handling_by_the_SR (per_second)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [F1    :.:F1     1]\n",
    "      [F2    :.:F2     0]\n",
    "      [r_act :.:r_act  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_F2FluxProcess(v_F2)\n",
    "  {\n",
    "    Name \"d/dt F2 in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [F2      :.:F2       1]\n",
    "      [r_act   :.:r_act    0]\n",
    "      [F1      :.:F1       0]\n",
    "      [r_inact :.:r_inact  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998r_actAssignmentProcess(r_act)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    k_rel_d  0.003; # k_rel_d in component Ca_handling_by_the_SR (millimolar)\n",
    "    k_rel_i  @k_rel_i;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [r_act :.:r_act          1]\n",
    "      [Ca_i  :../Cytosol:Ca_i  0]\n",
    "      [Ca_d  :../d:Ca_d        0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998r_inactAssignmentProcess(r_inact)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    k_rel_i  @k_rel_i;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [r_inact :.:r_inact        1]\n",
    "      [Ca_i    :../Cytosol:Ca_i  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998i_relAssignmentProcess(i_rel)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    alpha_rel  200000; # alpha_rel in component Ca_handling_by_the_SR (picoA_per_millimolar)\n",
    "\n",
    "    VariableReferenceList\n",
    "      [i_rel  :.:i_rel          1]\n",
    "      [F2     :.:F2             0]\n",
    "      [Ca_rel :.:Ca_rel         0]\n",
    "      [Ca_i   :../Cytosol:Ca_i  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_rel_upFluxProcess(j_Ca_rel_up)\n",
    "  {\n",
    "    Name \"d/dt Ca_rel in component Ca_handling_by_the_SR (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_rel :.:Ca_rel       1]\n",
    "      [Ca_up  :../SR_up:Ca_up -1]\n",
    "      [i_tr   :.:i_tr         0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_rel_iFluxProcess(j_Ca_rel_i)\n",
    "  {\n",
    "    Name \"d/dt Ca_rel in component Ca_handling_by_the_SR (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_rel    :.:Ca_rel        -1]\n",
    "      [Ca_i      :../Cytosol:Ca_i  1]\n",
    "      [i_rel     :.:i_rel          0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998j_Ca_relFluxProcess(j_Ca_rel)\n",
    "  {\n",
    "    Name \"d/dt Ca_rel in component Ca_handling_by_the_SR (millimolar)\";\n",
    "\n",
    "    F  @F;\n",
    "\n",
    "    VariableReferenceList\n",
    "      [Ca_rel    :.:Ca_rel     1]\n",
    "      [v_O_Calse :.:v_O_Calse  0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_O_Calse_assignAssignmentProcess(v_O_Calse_assign)\n",
    "  {\n",
    "    StepperID    PSV;\n",
    "\n",
    "    Name \"d/dt O_Calse in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [v_O_Calse :.:v_O_Calse  1]\n",
    "      [O_Calse   :.:O_Calse    0]\n",
    "      [Ca_rel    :.:Ca_rel     0];\n",
    "  }\n",
    "\n",
    "  Process Nygren_1998v_O_CalseFluxProcess(v_O_Calse)\n",
    "  {\n",
    "    Name \"d/dt O_Calse in component Ca_handling_by_the_SR (dimensionless)\";\n",
    "\n",
    "    VariableReferenceList\n",
    "      [O_Calse   :.:O_Calse    1]\n",
    "      [v_O_Calse :.:v_O_Calse  0];\n",
    "  }\n",
    "\n",
    "}\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "モデルのセット"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t = 0.0\n"
     ]
    }
   ],
   "source": [
    "setModel(EM, \"Nygren_1998\")\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "モデル内の全てのVariableとProcessを列挙"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable:/:SIZE\n",
      "Variable:/:voi\n",
      "\n",
      "Variable:/Cytosol:Ca_i\n",
      "Variable:/Cytosol:E_Ca\n",
      "Variable:/Cytosol:E_K\n",
      "Variable:/Cytosol:E_Na\n",
      "Variable:/Cytosol:K_i\n",
      "Variable:/Cytosol:Na_i\n",
      "Variable:/Cytosol:O_C\n",
      "Variable:/Cytosol:O_TC\n",
      "Variable:/Cytosol:O_TMgC\n",
      "Variable:/Cytosol:O_TMgMg\n",
      "Variable:/Cytosol:SIZE\n",
      "Variable:/Cytosol:V\n",
      "Variable:/Cytosol:dOCdt\n",
      "Variable:/Cytosol:dOTCdt\n",
      "Variable:/Cytosol:dOTMgCdt\n",
      "Variable:/Cytosol:d_L\n",
      "Variable:/Cytosol:d_L_infinity\n",
      "Variable:/Cytosol:f_Ca\n",
      "Variable:/Cytosol:f_L_1\n",
      "Variable:/Cytosol:f_L_2\n",
      "Variable:/Cytosol:f_L_infinity\n",
      "Variable:/Cytosol:h1\n",
      "Variable:/Cytosol:h2\n",
      "Variable:/Cytosol:h_infinity\n",
      "Variable:/Cytosol:i_B_Ca\n",
      "Variable:/Cytosol:i_B_Na\n",
      "Variable:/Cytosol:i_CaP\n",
      "Variable:/Cytosol:i_Ca_L\n",
      "Variable:/Cytosol:i_K1\n",
      "Variable:/Cytosol:i_Kr\n",
      "Variable:/Cytosol:i_Ks\n",
      "Variable:/Cytosol:i_Na\n",
      "Variable:/Cytosol:i_NaCa\n",
      "Variable:/Cytosol:i_NaK\n",
      "Variable:/Cytosol:i_Stim\n",
      "Variable:/Cytosol:i_sus\n",
      "Variable:/Cytosol:i_t\n",
      "Variable:/Cytosol:m\n",
      "Variable:/Cytosol:m_infinity\n",
      "Variable:/Cytosol:n\n",
      "Variable:/Cytosol:n_infinity\n",
      "Variable:/Cytosol:p_a\n",
      "Variable:/Cytosol:p_a_infinity\n",
      "Variable:/Cytosol:p_i\n",
      "Variable:/Cytosol:r\n",
      "Variable:/Cytosol:r_infinity\n",
      "Variable:/Cytosol:r_sus\n",
      "Variable:/Cytosol:r_sus_infinity\n",
      "Variable:/Cytosol:s\n",
      "Variable:/Cytosol:s_infinity\n",
      "Variable:/Cytosol:s_sus\n",
      "Variable:/Cytosol:s_sus_infinity\n",
      "Variable:/Cytosol:tau_d_L\n",
      "Variable:/Cytosol:tau_f_L1\n",
      "Variable:/Cytosol:tau_f_L2\n",
      "Variable:/Cytosol:tau_h1\n",
      "Variable:/Cytosol:tau_h2\n",
      "Variable:/Cytosol:tau_m\n",
      "Variable:/Cytosol:tau_n\n",
      "Variable:/Cytosol:tau_p_a\n",
      "Variable:/Cytosol:tau_r\n",
      "Variable:/Cytosol:tau_r_sus\n",
      "Variable:/Cytosol:tau_s\n",
      "Variable:/Cytosol:tau_s_sus\n",
      "\n",
      "Process:/:voi\n",
      "\n",
      "Process:/Cytosol:E_Ca\n",
      "Process:/Cytosol:E_K\n",
      "Process:/Cytosol:E_Na\n",
      "Process:/Cytosol:O\n",
      "Process:/Cytosol:i_B_Ca\n",
      "Process:/Cytosol:i_B_Na\n",
      "Process:/Cytosol:i_CaP\n",
      "Process:/Cytosol:i_Ca_L\n",
      "Process:/Cytosol:i_K1\n",
      "Process:/Cytosol:i_Kr\n",
      "Process:/Cytosol:i_Ks\n",
      "Process:/Cytosol:i_Na\n",
      "Process:/Cytosol:i_NaCa\n",
      "Process:/Cytosol:i_NaK\n",
      "Process:/Cytosol:i_Stim\n",
      "Process:/Cytosol:i_sus\n",
      "Process:/Cytosol:i_t\n",
      "Process:/Cytosol:j_Ca_i\n",
      "Process:/Cytosol:j_Ca_i_c\n",
      "Process:/Cytosol:j_K_i\n",
      "Process:/Cytosol:j_Na_i\n",
      "Process:/Cytosol:v_O_C\n",
      "Process:/Cytosol:v_O_TC\n",
      "Process:/Cytosol:v_O_TMgC\n",
      "Process:/Cytosol:v_O_TMgMg\n",
      "Process:/Cytosol:v_V\n",
      "Process:/Cytosol:v_d_L\n",
      "Process:/Cytosol:v_f_L_1\n",
      "Process:/Cytosol:v_f_L_2\n",
      "Process:/Cytosol:v_h1\n",
      "Process:/Cytosol:v_h2\n",
      "Process:/Cytosol:v_m\n",
      "Process:/Cytosol:v_n\n",
      "Process:/Cytosol:v_p_a\n",
      "Process:/Cytosol:v_r\n",
      "Process:/Cytosol:v_r_sus\n",
      "Process:/Cytosol:v_s\n",
      "Process:/Cytosol:v_s_sus\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for an_E_type in ( 'Variable', 'Process' ):\n",
    "    for a_SystemPath in ( '/', '/Cytosol' ):\n",
    "        for E in getEntityList( an_E_type, a_SystemPath ):\n",
    "            print( ':'.join( ( an_E_type, a_SystemPath, E )))\n",
    "        print(\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "EntityStubを作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "SystemPath_list = ( '/', '/Cytosol', )\n",
    "Stub_dict = {}\n",
    "\n",
    "for a_SystemPath in SystemPath_list:\n",
    "    for E_type in ('Variable', 'Process'):\n",
    "        for E in getEntityList( E_type, a_SystemPath ):\n",
    "                FullID = ':'.join( ( E_type, a_SystemPath, E ) )\n",
    "                Stub_dict[ FullID ] = createEntityStub( FullID )\n",
    "\n",
    "def get_FullPN_value( a_FullPN ):\n",
    "    a_FullPN_list = a_FullPN.split(':')\n",
    "    a_FullID = ':'.join(a_FullPN_list[:3])\n",
    "    return Stub_dict[ a_FullID ][ a_FullPN_list[3] ]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ICaL調査==================================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vm_stub = Stub_dict['Variable:/Cytosol:V']\n",
    "print( Vm_stub['Fixed'] )\n",
    "\n",
    "#Fix1 = Vm_stub['Fixed']\n",
    "#Value1 = Vm_stub['Value']\n",
    "\n",
    "Vm_stub['Fixed'] = 1\n",
    "\n",
    "print( Vm_stub['Fixed'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Target_Properties = dict(\n",
    "    Variable = ['Value', 'Velocity'], \n",
    "    Process  = ['Activity'],)\n",
    "Logger_dict = {}\n",
    "\n",
    "for a_SystemPath in SystemPath_list:\n",
    "    for E_type, Properties in Target_Properties.items():\n",
    "        for E in getEntityList( E_type, a_SystemPath ):\n",
    "            for p in Properties:\n",
    "                FullPN = ':'.join( ( E_type, a_SystemPath, E, p ) )\n",
    "                Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "                Logger_dict[ FullPN ].create()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "t0 = dict( t = getCurrentTime() )\n",
    "\n",
    "for a_FullID, a_Stub in Stub_dict.items():\n",
    "    if a_FullID.split(':')[0] == 'Variable':\n",
    "        t0[ a_FullID + ':Value' ] = a_Stub['Value']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3秒から回し"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "step_width = 3.0  # sec\n",
    "\n",
    "run( step_width )\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loggerを作りたい対象のFullPNを指定、Loggerを作成"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = { 'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_d_L:Value', 'Variable:/Cytosol:tau_f_L1:Value', 'Variable:/Cytosol:tau_f_L2:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vmの値を-80から40で固定する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "データをどのように取るか指定"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vmがしっかり固定されているか確認"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#FullPN_list = { 'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_d_L:Value', 'Variable:/Cytosol:tau_f_L1:Value', 'Variable:/Cytosol:tau_f_L2:Value'}\n",
    "\n",
    "for aFullPN in FullPN_list:\n",
    "    print( aFullPN )\n",
    "    print( Data_dict[ aFullPN ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " print( Data_dict[ aFullPN ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in FullPN_list:\n",
    "        plt.plot( d[ :, 0 ], d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "\n",
    "plt.legend( loc = 'upper right' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in FullPN_list:\n",
    "        plt.figure()\n",
    "        plt.plot( d[ :, 0 ], d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "plt.legend( loc = 'upper right' )        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:tau_f_L1:Value', 'Variable:/Cytosol:tau_f_L2:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPNs_E = [ \n",
    "   'Variable:/Cytosol:V:Value',\n",
    "    ]\n",
    "\n",
    "for aFullPN in FullPNs_E:\n",
    "    print( aFullPN )\n",
    "    print( Data_dict[ aFullPN ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in FullPNs_E:\n",
    "        plt.plot( d[ :, 0 ], d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "\n",
    "plt.legend( loc = 'upper right' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vm_stub = Stub_dict['Variable:/Cytosol:V']\n",
    "Fix2 = Vm_stub['Fixed']\n",
    "print(Fix2)\n",
    "Fix2 = 0\n",
    "print(Fix2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "print(Vm_stub['Value'])\n",
    "Vm_stub['Value'] = -70.0\n",
    "print(Vm_stub['Value'])\n",
    "\n",
    "Vm_stub['Fixed'] = 1\n",
    "print(Vm_stub['Fixed'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "run (1.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "FullPN_list = { 'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_d_L:Value', 'Variable:/Cytosol:tau_f_L1:Value', 'Variable:/Cytosol:tau_f_L2:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for FullPN in FullPN_list:\n",
    "  Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "  Logger_dict[ FullPN ].create()\n",
    "\n",
    "print(Logger_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:tau_d_L:Value', 'Variable:/Cytosol:tau_f_L1:Value', 'Variable:/Cytosol:tau_f_L2:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.figure()\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "==================================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vm_stub = Stub_dict['Variable:/Cytosol:V']\n",
    "print( Vm_stub['Fixed'] )\n",
    "\n",
    "#Fix1 = Vm_stub['Fixed']\n",
    "#Value1 = Vm_stub['Value']\n",
    "\n",
    "Vm_stub['Fixed'] = 1\n",
    "\n",
    "print( Vm_stub['Fixed'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "t0 = dict( t = getCurrentTime() )\n",
    "\n",
    "for a_FullID, a_Stub in Stub_dict.items():\n",
    "    if a_FullID.split(':')[0] == 'Variable':\n",
    "        t0[ a_FullID + ':Value' ] = a_Stub['Value']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "step_width = 3.0  # sec\n",
    "\n",
    "run( step_width )\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "INa調査==================================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = { 'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_m:Value', 'Variable:/Cytosol:tau_h1:Value', 'Variable:/Cytosol:tau_h2:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "for aFullPN in FullPN_list:\n",
    "    print( aFullPN )\n",
    "    print( Data_dict[ aFullPN ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:tau_m:Value', 'Variable:/Cytosol:tau_h1:Value', 'Variable:/Cytosol:tau_h2:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.figure()\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:tau_h1:Value', 'Variable:/Cytosol:tau_h2:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "INa infinity要素調査==========================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:h_infinity:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:h_infinity:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.figure()\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ICaL infinity要素調査==================================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:f_L_infinity:Value', 'Variable:/Cytosol:d_L_infinity:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:f_L_infinity:Value', 'Variable:/Cytosol:d_L_infinity:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It Isus調査1========================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:r_infinity:Value', 'Variable:/Cytosol:s_infinity:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:r_infinity:Value', 'Variable:/Cytosol:s_infinity:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It Isus調査2========================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:r_sus_infinity:Value', 'Variable:/Cytosol:s_sus_infinity:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = {'Variable:/Cytosol:r_sus_infinity:Value', 'Variable:/Cytosol:s_sus_infinity:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It Isus調査3========================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_r:Value', 'Variable:/Cytosol:tau_s:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = { 'Variable:/Cytosol:tau_r:Value', 'Variable:/Cytosol:tau_s:Value'}\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It Isus調査4========================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_r_sus:Value', 'Variable:/Cytosol:tau_s_sus:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "tau_FullPN_list = { 'Variable:/Cytosol:tau_r_sus:Value', 'Variable:/Cytosol:tau_s_sus:Value' }\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "IKr IKs調査1========================================================================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FullPN_list = {'Variable:/Cytosol:V:Value', 'Variable:/Cytosol:tau_n:Value'}\n",
    "print(FullPN_list)\n",
    "Logger_dict = {}\n",
    "    \n",
    "for FullPN in FullPN_list:\n",
    "    Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "    Logger_dict[ FullPN ].create()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "num_list = list( range(-80, 41, 1))\n",
    "print(num_list)\n",
    "\n",
    "for num in num_list:\n",
    "    Vm_stub['Fixed'] = 0\n",
    "    \n",
    "    Vm_stub['Value'] = num\n",
    "\n",
    "    Vm_stub['Fixed'] = 1\n",
    "    \n",
    "    run(1.0)\n",
    "\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data_dict = {}\n",
    "t_start = 3.0\n",
    "t_end = 124.0\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "tau_FullPN_list = { 'Variable:/Cytosol:tau_n:Value' }\n",
    "\n",
    "data_V = Data_dict['Variable:/Cytosol:V:Value'][ :, 1 ]\n",
    "\n",
    "plt.figure()\n",
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in tau_FullPN_list:\n",
    "        plt.plot( data_V, d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "=================================================================================================="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "Target_Properties = dict(\n",
    "    Variable = ['Value', 'Velocity'], \n",
    "    Process  = ['Activity'],)\n",
    "Logger_dict = {}\n",
    "\n",
    "for a_SystemPath in SystemPath_list:\n",
    "    for E_type, Properties in Target_Properties.items():\n",
    "        for E in getEntityList( E_type, a_SystemPath ):\n",
    "            for p in Properties:\n",
    "                FullPN = ':'.join( ( E_type, a_SystemPath, E, p ) )\n",
    "                Logger_dict[ FullPN ] = createLoggerStub( FullPN )\n",
    "                Logger_dict[ FullPN ].create()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "t0 = dict( t = getCurrentTime() )\n",
    "\n",
    "for a_FullID, a_Stub in Stub_dict.items():\n",
    "    if a_FullID.split(':')[0] == 'Variable':\n",
    "        t0[ a_FullID + ':Value' ] = a_Stub['Value']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "t = 0.5\n"
     ]
    }
   ],
   "source": [
    "step_width = 0.5  # sec\n",
    "\n",
    "run( step_width )\n",
    "print 't = {}'.format( getCurrentTime() )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "Data_dict = {}\n",
    "t_start = 0.0\n",
    "t_end = getCurrentTime()\n",
    "\n",
    "for FullPN, Logger in Logger_dict.items():\n",
    "    Data_dict[ FullPN ] = np.array( Logger.getData( t_start, t_end,  (t_end-t_start) / 1000 ) )[ :, :2 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "FullPNs_for_plot = [ \n",
    "   'Variable:/Cytosol:V:Value', \n",
    "   'Variable:/Cytosol:i_sus:Value', \n",
    "   'Variable:/Cytosol:i_t:Value', \n",
    "   'Variable:/Cytosol:i_sus:Value', \n",
    "   'Variable:/Cytosol:i_Ca_L:Value', \n",
    "   'Variable:/Cytosol:i_Na:Value' \n",
    "  ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for FullPN, d in Data_dict.items():\n",
    "    if FullPN in FullPNs_for_plot:\n",
    "        plt.figure()\n",
    "        plt.plot( d[ :, 0 ], d[ :, 1 ], label = FullPN.split(':')[ 2 ] )\n",
    "        \n",
    "        plt.legend( loc = 'upper right' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable:/Cytosol:V:Value\n",
      "[[ 0.00000000e+00 -7.42525000e+01]\n",
      " [ 5.00000000e-04 -7.42526903e+01]\n",
      " [ 1.00000000e-03 -7.42528846e+01]\n",
      " ...\n",
      " [ 4.98500000e-01 -7.24714477e+01]\n",
      " [ 4.99000000e-01 -7.24776172e+01]\n",
      " [ 4.99500000e-01 -7.24837576e+01]]\n",
      "Variable:/Cytosol:i_sus:Value\n",
      "[[0.         0.        ]\n",
      " [0.0005     0.00424148]\n",
      " [0.001      0.00424142]\n",
      " ...\n",
      " [0.4985     0.00605737]\n",
      " [0.499      0.00604929]\n",
      " [0.4995     0.00604125]]\n",
      "Variable:/Cytosol:i_t:Value\n",
      "[[0.         0.        ]\n",
      " [0.0005     0.07415036]\n",
      " [0.001      0.07415015]\n",
      " ...\n",
      " [0.4985     0.08127667]\n",
      " [0.499      0.08128596]\n",
      " [0.4995     0.08129514]]\n",
      "Variable:/Cytosol:i_sus:Value\n",
      "[[0.         0.        ]\n",
      " [0.0005     0.00424148]\n",
      " [0.001      0.00424142]\n",
      " ...\n",
      " [0.4985     0.00605737]\n",
      " [0.499      0.00604929]\n",
      " [0.4995     0.00604125]]\n",
      "Variable:/Cytosol:i_Ca_L:Value\n",
      "[[ 0.          0.        ]\n",
      " [ 0.0005     -0.0117681 ]\n",
      " [ 0.001      -0.01176755]\n",
      " ...\n",
      " [ 0.4985     -0.01522705]\n",
      " [ 0.499      -0.01521571]\n",
      " [ 0.4995     -0.01520442]]\n",
      "Variable:/Cytosol:i_Na:Value\n",
      "[[ 0.          0.        ]\n",
      " [ 0.0005     -0.00173007]\n",
      " [ 0.001      -0.00172997]\n",
      " ...\n",
      " [ 0.4985     -0.00295306]\n",
      " [ 0.499      -0.002948  ]\n",
      " [ 0.4995     -0.00294296]]\n"
     ]
    }
   ],
   "source": [
    "for aFullPN in FullPNs_for_plot:\n",
    "    print( aFullPN )\n",
    "    print( Data_dict[ aFullPN ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
